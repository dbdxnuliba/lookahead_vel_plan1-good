TMS320C6x C/C++ Optimizer               v7.3.4
Build Number 1MCKN-JIK27-UARAR-SAW-ZAZG_X_T_U

		======File-level Analysis Summary======


static struct i_sysbios_gates_GateHwi_Object *_Z31ti_sysbios_gates_GateHwi_createPK31ti_sysbios_gates_GateHwi_ParamsP23xdc_runtime_Error_Block() is called from 2 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_Object__create__S() (1 times)

static void _Z31ti_sysbios_gates_GateHwi_deletePP31ti_sysbios_gates_GateHwi_Object() is called from 2 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_Object__delete__S() (1 times)

static void _Z36ti_sysbios_gates_GateHwi_Params_initP31ti_sysbios_gates_GateHwi_Params() is called from 2 sites in this file.
    It appears to be inlineable (size = 10 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_Params__init__S() (1 times)

extern enum hannelMode _ZN13Interpolation10GetCurModeEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation10ProcessCmdEP8LineData() is called from 2 sites in this file.
    It appears to be inlineable (size = 73 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::CreateStopCmd() (1 times)
	LineData::NeedToStop() (1 times)
	InterpolationAlgorithm::SetSpeedProfileType() (6 times)
	MCommands::HasCmd() (3 times)

extern int _ZN13Interpolation11AddIntpDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	CircularBuffer<LineData>::InsertData() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZN13Interpolation11InterpolateEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 62 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	 ? () (1 times)
	Interpolation::ManageInterpolation() (1 times)
	Interpolation::Pause() (1 times)

extern void _ZN13Interpolation11SetFeedRateE9RatioTyped() is called from 0 sites in this file.
    It appears to be inlineable (size = 165 units)
    It has 5 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation12SetHeartbeatEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 12 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation12SetStopStateEv() is called from 4 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	 ? () (1 times)
	Interpolation::CopyNonMoveInfo() (1 times)

extern void _ZN13Interpolation13CreateStopCmdEv() is called from 4 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation14SetAxisMoveCmdE12NCCCmdNumbertbddb() is called from 0 sites in this file.
    It has 5 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (2 times)
	CircularBuffer<LineData>::ReadDataPtr() (1 times)
	CircularBuffer<LineData>::WriteData() (1 times)
	CircularBuffer<LineData>::ClearBuf() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)
	mask_64::CheckMask() (6 times)

extern void _ZN13Interpolation15CopyNonMoveInfoEP8LineDataS1_() is called from 3 sites in this file.
    It appears to be inlineable (size = 65 units)
    It has 5 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation15SetChannelIndexEiP18NCCCTChannelConfig() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern int _ZN13Interpolation16GetMachiningDataEv() is called from 1 sites in this file.
    It has 11 non-trivial scope blocks nested 7 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	Interpolation::CopyNonMoveInfo() (1 times)
	memset() (1 times)
	CircularBuffer<LineData>::Next() (2 times)
	Interpolation::SetAxisDynamicMask() (1 times)
	Interpolation::TransferToLineData() (1 times)
	Interpolation::ProcessCmd() (2 times)
	 ? () (4 times)
	sqrt() (1 times)
	pow() (1 times)
	Interpolation::ProcessNearbyLocate() (1 times)
	Interpolation::ConfigFeedRateType() (1 times)
	AxisMovData::CheckMask() (3 times)
	CircularBuffer<LineData>::ReadDataPtr() (1 times)
	CircularBuffer<LineData>::BufLen() (1 times)

extern void _ZN13Interpolation17ChangeChannelModeEv() is called from 3 sites in this file.
    It appears to be inlineable (size = 228 units)
    It has 6 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	CircularBuffer<LineData>::ClearBuf() (1 times)
	CircularBuffer<LineData>::InsertData() (1 times)
	MCommands::Reset() (1 times)

extern void _ZN13Interpolation17SetRetRefPosStateEbh() is called from 0 sites in this file.
    It appears to be inlineable (size = 64 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::ChangeChannelMode() (1 times)
	InterpolationAlgorithm::SetSpeedProfileType() (6 times)
	CircularBuffer<LineData>::ClearBuf() (2 times)
	Interpolation::SetMode() (1 times)
	ti_sysbios_gates_GateHwi_leave__E() (2 times)
	ti_sysbios_gates_GateHwi_enter__E() (2 times)

extern void _ZN13Interpolation17SetSingleLineModeEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 38 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation18ConfigFeedRateTypeE5GCode() is called from 1 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation18SetAxisDynamicMaskEv() is called from 2 sites in this file.
    It appears to be inlineable (size = 53 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation18TransferToLineDataEP8Geometry() is called from 1 sites in this file.
    It appears to be inlineable (size = 97 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	sqrt() (1 times)
	pow() (1 times)

extern int _ZN13Interpolation19ManageInterpolationEv() is called from 1 sites in this file.
    It appears to be inlineable (size = 456 units)
    It has 6 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	Interpolation::ChangeChannelMode() (2 times)
	Interpolation::UpdateStartCondition() (1 times)
	InterpolationAlgorithm::SaveEndData() (1 times)
	AxisMovData::CheckMask() (1 times)
	Interpolation::SetStopState() (3 times)
	__c6xabi_isinf() (1 times)
	std::__c6xabi_isnan() (1 times)
	Interpolation::SetAxisDynamicMask() (1 times)
	Interpolation::CopyNonMoveInfo() (1 times)
	 ? () (12 times)
	Interpolation::GetMachiningData() (1 times)

extern void _ZN13Interpolation19ProcessNearbyLocateEP8LineData() is called from 1 sites in this file.
    It has 5 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	 ? () (1 times)
	fmod() (1 times)

extern void _ZN13Interpolation19SetOptionalStopModeEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	Interpolation::CreateStopCmd() (1 times)
	MCommands::HasCmd() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation20UpdateStartConditionEv() is called from 3 sites in this file.
    It appears to be inlineable (size = 45 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

extern int _ZN13Interpolation23InsertInterpolationDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 49 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	CircularBuffer<LineData>::WriteData() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZN13Interpolation4InitEv() is called from 0 sites in this file.
    It has 7 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	Interpolation::InitState() (1 times)
	CircleInterpolation::CircleInterpolation() (1 times)
	LineInterpolation::LineInterpolation() (1 times)
	 ? () (3 times)
	QuickMoveInterpolation::QuickMoveInterpolation() (1 times)
	operator new[] () (3 times)
	LineData::LineData() (2 times)
	memset() (3 times)
	CircularBuffer<LineData>::CircularBuffer() (2 times)
	operator new () (8 times)
	ti_sysbios_gates_GateHwi_create() (1 times)
	ti_sysbios_gates_GateHwi_Params_init() (1 times)

extern void _ZN13Interpolation5PauseEb() is called from 1 sites in this file.
    It appears to be inlineable (size = 74 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	Interpolation::UpdateStartCondition() (1 times)
	Interpolation::SetStopState() (1 times)
	Interpolation::CreateStopCmd() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation5ResetEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 74 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	InterpolationAlgorithm::SetSpeedProfileType() (3 times)
	memcpy() (1 times)
	memset() (1 times)
	Interpolation::UpdateStartCondition() (1 times)
	Interpolation::InitState() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation7SetModeE11ChannelMode() is called from 1 sites in this file.
    It appears to be inlineable (size = 34 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	Interpolation::CreateStopCmd() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN13Interpolation8ContinueEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern char _ZN13Interpolation8IsPausedEi() is called from 0 sites in this file.
    It appears to be inlineable (size = 72 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	 ? () (1 times)

extern unsigned short _ZN13Interpolation9GetBufLenEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::BufLen() (1 times)

extern void _ZN13Interpolation9InitStateEv() is called from 2 sites in this file.
    It appears to be inlineable (size = 114 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	CircularBuffer<LineData>::ClearBuf() (2 times)

extern char _ZN13Interpolation9IsStoppedEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern void _ZN13Interpolation9SetCurPosEtd() is called from 0 sites in this file.
    It appears to be inlineable (size = 33 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern struct nterpolation *_ZN13InterpolationC1EtP18NCCCTChannelConfigP17NCCCTChannelStateP20ChannelRealtimeStatePFiP8LineDataPvEPFvhdS8_ES8_() is called from 1 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::SetChannelIndex() (1 times)
	NCCCmd::NCCCmd() (1 times)

extern struct nterpolation *_ZN13InterpolationC2EtP18NCCCTChannelConfigP17NCCCTChannelStateP20ChannelRealtimeStatePFiP8LineDataPvEPFvhdS8_ES8_() is called from 0 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::Interpolation() (1 times)

extern void *_ZN13InterpolationD1Ev() is called from 1 sites in this file.
    It appears to be inlineable (size = 156 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	LineData::LineData() (1 times)
	ti_sysbios_gates_GateHwi_delete() (1 times)
	 ? () (3 times)
	operator delete[] () (2 times)
	CircularBuffer<LineData>::~CircularBuffer() (2 times)
	operator delete () (5 times)

extern void *_ZN13InterpolationD2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::~Interpolation() (1 times)

extern int _ZN14CircularBufferI8LineDataE10InsertDataEPKS0_i() is called from 2 sites in this file.
    It appears to be inlineable (size = 122 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	memcpy() (4 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZN14CircularBufferI8LineDataE11EmptyBufLenEv() is called from 1 sites in this file.
    It appears to be inlineable (size = 13 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern struct ineData *_ZN14CircularBufferI8LineDataE11ReadDataPtrEs() is called from 2 sites in this file.
    It appears to be inlineable (size = 40 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN14CircularBufferI8LineDataE4NextEv() is called from 2 sites in this file.
    It appears to be inlineable (size = 39 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZN14CircularBufferI8LineDataE6BufLenEv() is called from 2 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern void _ZN14CircularBufferI8LineDataE8ClearBufEv() is called from 6 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZN14CircularBufferI8LineDataE9WriteDataEPKS0_i() is called from 2 sites in this file.
    It appears to be inlineable (size = 124 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	memcpy() (4 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern struct Z14CircularBufferI8LineDataE *_ZN14CircularBufferI8LineDataEC1Ei() is called from 3 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_create() (1 times)
	ti_sysbios_gates_GateHwi_Params_init() (1 times)
	memset() (1 times)
	__cxa_vec_new() (1 times)

extern struct Z14CircularBufferI8LineDataE *_ZN14CircularBufferI8LineDataEC2Ei() is called from 0 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::CircularBuffer() (1 times)

extern void *_ZN14CircularBufferI8LineDataED1Ev() is called from 3 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_delete() (1 times)
	__cxa_vec_delete() (1 times)

extern void *_ZN14CircularBufferI8LineDataED2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::~CircularBuffer() (1 times)

extern struct ineInterpolation *_ZN17LineInterpolationC1EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 2 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineInterpolation::SetChannelIndex() (1 times)
	InterpolationAlgorithm::InterpolationAlgorithm [subobject]() (1 times)

extern struct ineInterpolation *_ZN17LineInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineInterpolation::LineInterpolation() (1 times)

extern struct ircleInterpolation *_ZN19CircleInterpolationC1EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 2 sites in this file.
    It appears to be inlineable (size = 20 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircleInterpolation::SetChannelIndex() (1 times)
	InterpolationAlgorithm::InterpolationAlgorithm [subobject]() (1 times)

extern struct ircleInterpolation *_ZN19CircleInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircleInterpolation::CircleInterpolation() (1 times)

extern struct uickMoveInterpolation *_ZN22QuickMoveInterpolationC1EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 2 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	QuickMoveInterpolation::SetChannelIndex() (1 times)
	InterpolationAlgorithm::InterpolationAlgorithm [subobject]() (1 times)

extern struct uickMoveInterpolation *_ZN22QuickMoveInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	QuickMoveInterpolation::QuickMoveInterpolation() (1 times)

extern struct CCCmd *_ZN6NCCCmdC1Ev() is called from 2 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern struct CCCmd *_ZN6NCCCmdC2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	NCCCmd::NCCCmd() (1 times)

extern char _ZN7mask_649CheckMaskEi() is called from 6 sites in this file.
    It appears to be inlineable (size = 40 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

extern struct ineData *_ZN8LineDataC1Ev() is called from 2 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ParaEntry::ParaEntry() (1 times)
	MCommands::MCommands() (1 times)
	ExtraMovData::ExtraMovData() (1 times)
	AxisMovData::AxisMovData() (1 times)
	SpindleInfo::SpindleInfo() (1 times)
	FeedInfo::FeedInfo() (1 times)
	AxisDataMode::AxisDataMode() (1 times)
	CoordInfo::CoordInfo() (1 times)

extern struct ineData *_ZN8LineDataC2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)

extern char _ZNK13Interpolation12IsBufferFullEh() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_leave__E() (1 times)
	CircularBuffer<LineData>::EmptyBufLen() (1 times)
	ti_sysbios_gates_GateHwi_enter__E() (1 times)

extern int _ZNK13Interpolation14GetCurLineDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

static int _ZSt14__c6xabi_isnand() is called from 1 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

Global variable is not referenced in this file:
	static const double ROTARY_AXIS_DIS_PER_R
	static const int IO_NUM
	static const double MAX_NEGATIVE_POS
	static const double MAX_POSITIVE_POS
	static const int MAX_POT_NUM
	static const int MAX_TOOL_NUM
	static const int NCC_DATA_PACKAGE_HEADER_SIZE
	static const int DATA_PACKAGE_SIZE
	static const int SCREW_COMP_TABLE_MAX_LEN
	static const int G_CODE_GROUP_NUM
	static const int MAX_FILE_NAME_LEN
	static const int PAUSE_VALID_NUM
	static const int RESET_VALID_NUM
	static const int MAX_EXTRA_DATA_NUMBER
	static const int MAX_M_PER_LINE
	static const int MAX_AXIS_NUM



These functions may be recursive:
	Interpolation::AddIntpData()
	Interpolation::Interpolate()
	Interpolation::SetFeedRate()
	Interpolation::SetAxisMoveCmd()
	Interpolation::SetRetRefPosState()
	Interpolation::SetSingleLineMode()
	Interpolation::ManageInterpolation()
	Interpolation::ChangeChannelMode()
	Interpolation::GetMachiningData()
	Interpolation::TransferToLineData()
	Interpolation::ProcessCmd()
	Interpolation::ProcessNearbyLocate()
	Interpolation::SetOptionalStopMode()
	Interpolation::InsertInterpolationData()
	Interpolation::Init()
	Interpolation::Pause()
	Interpolation::SetStopState()
	Interpolation::Reset()
	Interpolation::SetMode()
	Interpolation::Continue()
	Interpolation::IsPaused()
	Interpolation::GetBufLen()
	Interpolation::InitState()
	Interpolation::~Interpolation [subobject]()
	Interpolation::~Interpolation()
	CircularBuffer<LineData>::InsertData()
	CircularBuffer<LineData>::ReadDataPtr()
	CircularBuffer<LineData>::Next()
	CircularBuffer<LineData>::BufLen()
	CircularBuffer<LineData>::ClearBuf()
	CircularBuffer<LineData>::WriteData()
	CircularBuffer<LineData>::CircularBuffer [subobject]()
	CircularBuffer<LineData>::CircularBuffer()
	ti_sysbios_gates_GateHwi_create()
	ti_sysbios_gates_GateHwi_Params_init()
	CircularBuffer<LineData>::~CircularBuffer [subobject]()
	CircularBuffer<LineData>::~CircularBuffer()
	ti_sysbios_gates_GateHwi_delete()
	LineInterpolation::LineInterpolation [subobject]()
	LineInterpolation::LineInterpolation()
	CircleInterpolation::CircleInterpolation [subobject]()
	CircleInterpolation::CircleInterpolation()
	QuickMoveInterpolation::QuickMoveInterpolation [subobject]()
	QuickMoveInterpolation::QuickMoveInterpolation()
	LineData::LineData [subobject]()
	LineData::LineData()
	Interpolation::IsBufferFull()
	CircularBuffer<LineData>::EmptyBufLen()

Function _Z31ti_sysbios_gates_GateHwi_createPK31ti_sysbios_gates_GateHwi_ParamsP23xdc_runtime_Error_Block() will be specialized on these parameters:
	[2] __eb == NULL;
Inlineable function will be suppressed: ti_sysbios_gates_GateHwi_delete()
Inlineable function will be suppressed: ti_sysbios_gates_GateHwi_Params_init()
Inlineable function will be suppressed: ti_sysbios_gates_GateHwi_create()
Inlineable function will be suppressed: LineInterpolation::LineInterpolation()
Inlineable function will be suppressed: QuickMoveInterpolation::QuickMoveInterpolation()
Inlineable function will be suppressed: NCCCmd::NCCCmd()
Inlineable function will be suppressed: CircleInterpolation::CircleInterpolation()
Inlineable function will be suppressed: Interpolation::SetAxisDynamicMask()
Inlineable function will be suppressed: Interpolation::CopyNonMoveInfo()
Inlineable function will be suppressed: mask_64::CheckMask()
Inlineable function will be suppressed: Interpolation::ProcessCmd()
Inlineable function will be suppressed: Interpolation::InitState()

Making this function inlineable: Interpolation::SetChannelIndex()

Making this function inlineable: Interpolation::CreateStopCmd()

Making this function inlineable: Interpolation::Interpolation()

Making this function inlineable: Interpolation::ConfigFeedRateType()

Making this function inlineable: Interpolation::UpdateStartCondition()

Making this function inlineable: CircularBuffer<LineData>::BufLen()
Inlineable function will be suppressed: CircularBuffer<LineData>::BufLen()

Making this function inlineable: CircularBuffer<LineData>::EmptyBufLen()
Inlineable function will be suppressed: CircularBuffer<LineData>::EmptyBufLen()

Making this function inlineable: CircularBuffer<LineData>::ClearBuf()
Inlineable function will be suppressed: CircularBuffer<LineData>::ClearBuf()

Making this function inlineable: CircularBuffer<LineData>::~CircularBuffer()
Inlineable function will be suppressed: CircularBuffer<LineData>::~CircularBuffer()

Making this function inlineable: CircularBuffer<LineData>::ReadDataPtr()

Making this function inlineable: CircularBuffer<LineData>::Next()

Making this function inlineable: Interpolation::SetMode()

These external functions are called but not defined here:
	memcpy()
	fmod()
	pow()
	sqrt()
	memset()
	CoordInfo::CoordInfo()
	AxisDataMode::AxisDataMode()
	FeedInfo::FeedInfo()
	SpindleInfo::SpindleInfo()
	AxisMovData::AxisMovData()
	ExtraMovData::ExtraMovData()
	MCommands::MCommands()
	ParaEntry::ParaEntry()
	QuickMoveInterpolation::SetChannelIndex()
	CircleInterpolation::SetChannelIndex()
	InterpolationAlgorithm::InterpolationAlgorithm [subobject]()
	LineInterpolation::SetChannelIndex()
	__cxa_vec_delete()
	__cxa_vec_new()
	operator delete ()
	operator delete[] ()
	operator new ()
	operator new[] ()
	__c6xabi_isinf()
	InterpolationAlgorithm::SaveEndData()
	MCommands::Reset()
	AxisMovData::CheckMask()
	 ? ()
	ti_sysbios_gates_GateHwi_enter__E()
	ti_sysbios_gates_GateHwi_leave__E()
	MCommands::HasCmd()
	InterpolationAlgorithm::SetSpeedProfileType()
	LineData::NeedToStop()
	ti_sysbios_gates_GateHwi_Params__init__S()
	ti_sysbios_gates_GateHwi_Object__delete__S()
	ti_sysbios_gates_GateHwi_Object__create__S()

Variable's value is constant in this file:
    extern const double _ZN13Interpolation7kMaxPosE = 1000.0;

		======= End file-level Analysis =======


==============================================================================

extern int _ZNK13Interpolation14GetCurLineDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 4 memory accesses with 1 dependences.


==============================================================================

extern char _ZNK13Interpolation12IsBufferFullEh() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::EmptyBufLen() (1 times)

There are 7 memory accesses with 0 dependences.


==============================================================================

extern struct ineData *_ZN8LineDataC1Ev() is called from 2 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 0 memory accesses with 0 dependences.


==============================================================================

extern struct ineData *_ZN8LineDataC2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)

There are 0 memory accesses with 0 dependences.


==============================================================================

extern struct CCCmd *_ZN6NCCCmdC2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	NCCCmd::NCCCmd() (1 times)

There are 4 memory accesses with 0 dependences.


==============================================================================

extern struct uickMoveInterpolation *_ZN22QuickMoveInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	QuickMoveInterpolation::QuickMoveInterpolation() (1 times)

There are 1 memory accesses with 0 dependences.


==============================================================================

extern struct ircleInterpolation *_ZN19CircleInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircleInterpolation::CircleInterpolation() (1 times)

There are 2 memory accesses with 0 dependences.


==============================================================================

extern struct ineInterpolation *_ZN17LineInterpolationC2EP8GeometryPP11DynamicInfoiP18NCCCTChannelConfigP20ChannelRealtimeState() is called from 0 sites in this file.
    It appears to be inlineable (size = 14 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineInterpolation::LineInterpolation() (1 times)

There are 1 memory accesses with 0 dependences.


==============================================================================

extern void *_ZN14CircularBufferI8LineDataED2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::~CircularBuffer() (1 times)

There are 1 memory accesses with 0 dependences.


==============================================================================

extern struct Z14CircularBufferI8LineDataE *_ZN14CircularBufferI8LineDataEC1Ei() is called from 3 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_Params_init() (1 times)
	ti_sysbios_gates_GateHwi_create() (1 times)

There are 7 memory accesses with 1 dependences.


==============================================================================

extern struct Z14CircularBufferI8LineDataE *_ZN14CircularBufferI8LineDataEC2Ei() is called from 0 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::CircularBuffer() (1 times)

There are 0 memory accesses with 0 dependences.


==============================================================================

extern int _ZN14CircularBufferI8LineDataE9WriteDataEPKS0_i() is called from 2 sites in this file.
    It appears to be inlineable (size = 124 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

There are 18 memory accesses with 9 dependences.


==============================================================================

extern void _ZN14CircularBufferI8LineDataE4NextEv() is called from 2 sites in this file.
    It appears to be inlineable (size = 39 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 9 memory accesses with 4 dependences.


==============================================================================

extern struct ineData *_ZN14CircularBufferI8LineDataE11ReadDataPtrEs() is called from 2 sites in this file.
    It appears to be inlineable (size = 40 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 6 memory accesses with 0 dependences.


==============================================================================

extern int _ZN14CircularBufferI8LineDataE10InsertDataEPKS0_i() is called from 2 sites in this file.
    It appears to be inlineable (size = 122 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

There are 17 memory accesses with 10 dependences.


==============================================================================

extern void *_ZN13InterpolationD1Ev() is called from 1 sites in this file.
    It appears to be inlineable (size = 156 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	CircularBuffer<LineData>::~CircularBuffer() (2 times)
	ti_sysbios_gates_GateHwi_delete() (1 times)
	LineData::LineData() (1 times)

There are 33 memory accesses with 86 dependences.


==============================================================================

extern void *_ZN13InterpolationD2Ev() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::~Interpolation() (1 times)

There are 0 memory accesses with 0 dependences.


==============================================================================

extern void _ZN13Interpolation15SetChannelIndexEiP18NCCCTChannelConfig() is called from 1 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 2 memory accesses with 0 dependences.


==============================================================================

extern struct nterpolation *_ZN13InterpolationC1EtP18NCCCTChannelConfigP17NCCCTChannelStateP20ChannelRealtimeStatePFiP8LineDataPvEPFvhdS8_ES8_() is called from 1 sites in this file.
    It appears to be inlineable (size = 27 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	NCCCmd::NCCCmd() (1 times)
	Interpolation::SetChannelIndex() (1 times)

There are 11 memory accesses with 0 dependences.


==============================================================================

extern struct nterpolation *_ZN13InterpolationC2EtP18NCCCTChannelConfigP17NCCCTChannelStateP20ChannelRealtimeStatePFiP8LineDataPvEPFvhdS8_ES8_() is called from 0 sites in this file.
    It appears to be inlineable (size = 18 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::Interpolation() (1 times)

There are 0 memory accesses with 0 dependences.


==============================================================================

extern void _ZN13Interpolation9SetCurPosEtd() is called from 0 sites in this file.
    It appears to be inlineable (size = 33 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 9 memory accesses with 5 dependences.


==============================================================================

extern char _ZN13Interpolation9IsStoppedEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 11 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 1 memory accesses with 0 dependences.


==============================================================================

extern unsigned short _ZN13Interpolation9GetBufLenEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 6 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::BufLen() (1 times)

There are 4 memory accesses with 0 dependences.


==============================================================================

extern char _ZN13Interpolation8IsPausedEi() is called from 0 sites in this file.
    It appears to be inlineable (size = 72 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	LineData::LineData() (1 times)

There are 15 memory accesses with 0 dependences.


==============================================================================

extern void _ZN13Interpolation8ContinueEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 31 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 8 memory accesses with 1 dependences.


==============================================================================

extern void _ZN13Interpolation13CreateStopCmdEv() is called from 4 sites in this file.
    It appears to be inlineable (size = 9 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 3 memory accesses with 0 dependences.


==============================================================================

extern void _ZN13Interpolation7SetModeE11ChannelMode() is called from 1 sites in this file.
    It appears to be inlineable (size = 34 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::CreateStopCmd() (1 times)

There are 13 memory accesses with 2 dependences.


==============================================================================

extern void _ZN13Interpolation20UpdateStartConditionEv() is called from 3 sites in this file.
    It appears to be inlineable (size = 45 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

There are 12 memory accesses with 23 dependences.


==============================================================================

extern void _ZN13Interpolation5ResetEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 74 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	Interpolation::InitState() (1 times)
	Interpolation::UpdateStartCondition() (1 times)

ADVICE: In function Interpolation::Reset()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:395-397
	for the statement ((double *)(*this).m_data)[i+311] = 0.0; at line 396

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    ((double *)(*this).m_data)[i+311];
	do not access the same object in memory.

There are 88 memory accesses with 1138 dependences.


==============================================================================

extern void _ZN13Interpolation12SetStopStateEv() is called from 4 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::CopyNonMoveInfo() (1 times)
	LineData::LineData() (1 times)

There are 31 memory accesses with 34 dependences.


==============================================================================

extern void _ZN13Interpolation5PauseEb() is called from 1 sites in this file.
    It appears to be inlineable (size = 74 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	Interpolation::CreateStopCmd() (1 times)
	Interpolation::SetStopState() (1 times)
	Interpolation::UpdateStartCondition() (1 times)

There are 30 memory accesses with 67 dependences.


==============================================================================

extern int _ZN13Interpolation4InitEv() is called from 0 sites in this file.
    It has 7 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	ti_sysbios_gates_GateHwi_Params_init() (1 times)
	ti_sysbios_gates_GateHwi_create() (1 times)
	CircularBuffer<LineData>::CircularBuffer() (2 times)
	LineData::LineData() (2 times)
	QuickMoveInterpolation::QuickMoveInterpolation() (1 times)
	LineInterpolation::LineInterpolation() (1 times)
	CircleInterpolation::CircleInterpolation() (1 times)
	Interpolation::InitState() (1 times)

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136
	and the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    ((double *)(*this).m_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137
	and the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137
	and the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_realtime_state)[i+64];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136
	and the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_realtime_state)[i+64];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*this).m_realtime_state)[i+64]; at line 136
	and the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    ((double *)(*this).m_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    ((double *)(*this).m_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'i' at lines ../src/interpolation/interpolation.cpp:135-138
	for the statement ((double *)(*this).m_data)[i+180] = ((double *)(*this).m_realtime_state)[i+64]; at line 137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    ((double *)(*this).m_realtime_state)[i+64];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:229-231
	for the statement (*this).m_last_step_mode[i] = 0; at line 230

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_last_step_mode;
	and                    (*this).m_last_step_mode[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::Init()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:229-231
	for the statement if ( i < (*(*this).m_channel_config).axis_number ) goto g59; else goto g60; at line 229
	and the statement (*this).m_last_step_mode[i] = 0; at line 230

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*this).m_last_step_mode[i];
	do not access the same object in memory.

There are 139 memory accesses with 2751 dependences.


==============================================================================

extern int _ZN13Interpolation23InsertInterpolationDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 49 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	CircularBuffer<LineData>::WriteData() (1 times)

There are 15 memory accesses with 12 dependences.


==============================================================================

extern void _ZN13Interpolation19SetOptionalStopModeEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::CreateStopCmd() (1 times)

There are 10 memory accesses with 2 dependences.


==============================================================================

extern void _ZN13Interpolation19ProcessNearbyLocateEP8LineData() is called from 1 sites in this file.
    It has 5 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	LineData::LineData() (1 times)

There are 22 memory accesses with 4 dependences.


==============================================================================

extern void _ZN13Interpolation18ConfigFeedRateTypeE5GCode() is called from 1 sites in this file.
    It appears to be inlineable (size = 35 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 5 memory accesses with 6 dependences.


==============================================================================

extern void _ZN13Interpolation18TransferToLineDataEP8Geometry() is called from 1 sites in this file.
    It appears to be inlineable (size = 97 units)
    It has 4 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

There are 18 memory accesses with 72 dependences.


==============================================================================

extern int _ZN13Interpolation16GetMachiningDataEv() is called from 1 sites in this file.
    It has 11 non-trivial scope blocks nested 7 deep.
    It calls these functions:
	CircularBuffer<LineData>::BufLen() (1 times)
	CircularBuffer<LineData>::ReadDataPtr() (1 times)
	Interpolation::ConfigFeedRateType() (1 times)
	Interpolation::ProcessNearbyLocate() (1 times)
	Interpolation::ProcessCmd() (2 times)
	Interpolation::TransferToLineData() (1 times)
	Interpolation::SetAxisDynamicMask() (1 times)
	CircularBuffer<LineData>::Next() (2 times)
	Interpolation::CopyNonMoveInfo() (1 times)
	LineData::LineData() (1 times)

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1141-1147
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist+pow(((double *)(*(*this).m_geometry).end_data)[i+180]-((double *)(*this).m_geometry)[i], 2.0); at line 1143

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1141-1147
	for the statement if ( i < (*(*this).m_channel_config).axis_number-1 ) goto g21; else goto g24; at line 1141
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist+pow(((double *)(*(*this).m_geometry).end_data)[i+180]-((double *)(*this).m_geometry)[i], 2.0); at line 1143

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1141-1147
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist+pow(((double *)(*(*this).m_geometry).end_data)[i+180]-((double *)(*this).m_geometry)[i], 2.0); at line 1143

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1141-1147
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist+pow(((double *)(*(*this).m_geometry).end_data)[i+180]-((double *)(*this).m_geometry)[i], 2.0); at line 1143

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1173-1177
	for the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (unsigned char)i) ) goto g96; else goto g97; at line 1174
	and the statement ((double *)(*this).m_geometry)[i] = ((double *)(*(*this).m_geometry).end_data)[i+180]; at line 1175

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1173-1177
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*(*this).m_geometry).end_data)[i+180]; at line 1175

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1173-1177
	for the statement if ( i < (*(*this).m_channel_config).axis_number ) goto g95; else goto g98; at line 1173
	and the statement ((double *)(*this).m_geometry)[i] = ((double *)(*(*this).m_geometry).end_data)[i+180]; at line 1175

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    ((double *)(*this).m_geometry)[i];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1173-1177
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*(*this).m_geometry).end_data)[i+180]; at line 1175

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[i+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1173-1177
	for the statement ((double *)(*this).m_geometry)[i] = ((double *)(*(*this).m_geometry).end_data)[i+180]; at line 1175

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( ((*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f < 1.00000000000000002092e-8)&(get_data_time >= 2) ) goto g3; else goto g4; at line 1112
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1115
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1115
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement last_fe = (*(*(*this).m_geometry).end_data).feed_info.end_feed_speed; at line 1117
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement last_fe = (*(*(*this).m_geometry).end_data).feed_info.end_feed_speed; at line 1117
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement min_step_time = (*this).m_interpolation_cycle_time-(*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time; at line 1119
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_trajectory_index;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement min_step_time = (*this).m_interpolation_cycle_time-(*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time; at line 1119
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement min_step_time = (*this).m_interpolation_cycle_time-(*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time; at line 1119
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement min_step_time = (*this).m_interpolation_cycle_time-(*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time; at line 1119
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_cycle_time;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1120
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1120
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_state).servo_tool_magazine ) goto g9; else goto g11; at line 1122
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (*(*this).m_channel_state).servo_tool_magazine_axis) ) goto g11; else goto g10; at line 1123
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (*(*this).m_channel_state).servo_tool_magazine_axis) ) goto g11; else goto g10; at line 1123
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement interpolation_type = (*(*(*this).m_geometry).end_data).interpolation_type; at line 1129
	and the statement (*(*this).m_geometry).end_data = pointer; at line 1120

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120
	and the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (*(*this).m_channel_state).servo_tool_magazine_axis) ) goto g11; else goto g10; at line 1123

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_geometry).end_data = pointer; at line 1120
	and the statement interpolation_type = (*(*(*this).m_geometry).end_data).interpolation_type; at line 1129

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_state).servo_tool_magazine ) goto g9; else goto g11; at line 1122
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (*(*this).m_channel_state).servo_tool_magazine_axis) ) goto g11; else goto g10; at line 1123
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( AxisMovData::CheckMask((struct xisMovData *)(*(*this).m_geometry).end_data+1432, (*(*this).m_channel_state).servo_tool_magazine_axis) ) goto g11; else goto g10; at line 1123
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement interpolation_type = (*(*(*this).m_geometry).end_data).interpolation_type; at line 1129
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_realtime_state;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement interpolation_type = (*(*(*this).m_geometry).end_data).interpolation_type; at line 1129
	and the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement ((double *)(*(*this).m_geometry).end_data)[(*(*this).m_channel_state).servo_tool_magazine_axis+180] = ((double *)(*this).m_realtime_state)[(*(*this).m_channel_state).servo_tool_magazine_axis+64]; at line 1124
	and the statement interpolation_type = (*(*(*this).m_geometry).end_data).interpolation_type; at line 1129

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_config).axis_number < 5 ) goto g25; else goto g20; at line 1141
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = (*(*(*this).m_geometry).end_data).axis_mov_data.dist*(*(*(*this).m_geometry).end_data).axis_mov_data.dist; at line 1137
	and the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( ABS(*(*this).m_feed_rate) < 1.00000000000000002092e-8 ) goto g30; else goto g32; at line 1252
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_feed_rate;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement data = (*(*this).m_geometry).end_data; at line 1257
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement if ( ABS(*(*this).m_feed_rate) < 1.00000000000000002092e-8 ) goto g30; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    *(*this).m_feed_rate;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_interpolation_algorithm).__vptr[3];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_interpolation_algorithm).__vptr;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist = sqrt((*(*(*this).m_geometry).end_data).axis_mov_data.dist); at line 1148
	and the statement data = (*(*this).m_geometry).end_data; at line 1257

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*this).m_is_single_line_mode ) goto g29; else goto g32; at line 1252
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_is_single_line_mode;
	and                    (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( ABS(*(*this).m_feed_rate) < 1.00000000000000002092e-8 ) goto g30; else goto g32; at line 1252
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_feed_rate;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement data = (*(*this).m_geometry).end_data; at line 1257
	and the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement if ( (*(*(*this).m_geometry).end_data).interpolation_flag ) goto g27; else goto g28; at line 1152

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement if ( ABS(*(*this).m_feed_rate) < 1.00000000000000002092e-8 ) goto g30; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    *(*this).m_feed_rate;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_interpolation_algorithm).__vptr[3];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement if ( ABS((*(double (*)())(*(*this).m_interpolation_algorithm).__vptr[3])((*this).m_interpolation_algorithm)) < 1.00000000000000002092e-8 ) goto g31; else goto g32; at line 1252

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_interpolation_algorithm).__vptr;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).axis_mov_data.dist_processed = 1u; at line 1150
	and the statement data = (*(*this).m_geometry).end_data; at line 1257

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_trajectory_index;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_config).quick_move_mode ) goto g72; else goto g69; at line 1196
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*this).m_cur_channel_mode == 4 ) goto g70; else goto g72; at line 1196
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_cur_channel_mode;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement Interpolation::TransferToLineData(this, (*this).m_geometry); at line 1199
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*(*this).m_geometry).end_data).axis_mov_data.dist < 1.00000000000000002092e-8 ) goto g100; else goto g71; at line 1202
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1204
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_line_interpolation;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1204
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*this).m_cur_channel_mode == 4 ) goto g73; else goto g80; at line 1207
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_cur_channel_mode;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).current_f = 0.0; at line 1193
	and the statement if ( (*(*(*this).m_geometry).end_data).axis_mov_data.dist < 1.00000000000000002092e-8 ) goto g100; else goto g71; at line 1202

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1204
	and the statement if ( (*(*(*this).m_geometry).end_data).axis_mov_data.dist < 1.00000000000000002092e-8 ) goto g100; else goto g71; at line 1202

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_quick_move_interpolation; at line 1226
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_quick_move_interpolation; at line 1226
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_trajectory_index;
	and                    (*(*(*this).m_geometry).end_data).interpolation_flag;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_circle_interpolation; at line 1237
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_circle_interpolation;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_circle_interpolation; at line 1237
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1231
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_line_interpolation;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1231
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement CircularBuffer<LineData>::Next((*this).m_data_buffer); at line 1246
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_config).axis_number ) goto g94; else goto g99; at line 1173
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1242
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_circle_interpolation; at line 1237
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_circle_interpolation; at line 1237
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1231
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_interpolation_algorithm = (struct nterpolationAlgorithm *)(*this).m_line_interpolation; at line 1231
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_interpolation_algorithm;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_trajectory_index;
	and                    (*(*(*this).m_geometry).end_data).interpolation_flag;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_trajectory_index;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement if ( (*(*this).m_channel_config).axis_number ) goto g94; else goto g99; at line 1173
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1262
	and the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    (*this).m_dynamic_info[(*this).m_trajectory_index];
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time = (*(*this).m_dynamic_info[(*this).m_trajectory_index]).left_time+step_time; at line 1172
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_dynamic_info;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement this = (*this).m_data_buffer; at line 1262
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data_buffer;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement dest_data = (*this).m_data; at line 1267
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement src_data = (*(*this).m_geometry).end_data; at line 1267
	and the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178
	and the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).interpolation_flag = 0u; at line 1178
	and the statement src_data = (*(*this).m_geometry).end_data; at line 1267

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_channel_config;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement dest_data = (*this).m_data; at line 1267
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement src_data = (*(*this).m_geometry).end_data; at line 1267
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).OutputData)((*(*this).m_geometry).end_data, (*this).m_owner_ptr); at line 1270
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_owner_ptr;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).OutputData)((*(*this).m_geometry).end_data, (*this).m_owner_ptr); at line 1270
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*this).OutputData)((*(*this).m_geometry).end_data, (*this).m_owner_ptr); at line 1270
	and the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).OutputData;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263
	and the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263
	and the statement src_data = (*(*this).m_geometry).end_data; at line 1267

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*(*(*this).m_geometry).end_data).feed_info.cur_speed = 0.0; at line 1263
	and the statement (*(*this).OutputData)((*(*this).m_geometry).end_data, (*this).m_owner_ptr); at line 1270

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::GetMachiningData()() in ../src/interpolation/interpolation.cpp
	in the 'while' loop with loop variable 'get_data_time' at lines ../src/interpolation/interpolation.cpp:1111-1276
	for the statement (*this).m_is_reach_end = 1; at line 1268
	and the statement memset((*(*this).m_geometry).end_data+2488, 0, (unsigned)(*(*this).m_channel_config).axis_number*8u); at line 1264

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_is_reach_end;
	and                    (*(*this).m_channel_config).axis_number;
	do not access the same object in memory.

There are 248 memory accesses with 6632 dependences.


==============================================================================

static int _ZSt14__c6xabi_isnand() is called from 1 sites in this file.
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 3 memory accesses with 2 dependences.


==============================================================================

extern void _ZN13Interpolation17ChangeChannelModeEv() is called from 3 sites in this file.
    It appears to be inlineable (size = 228 units)
    It has 6 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	CircularBuffer<LineData>::InsertData() (1 times)
	CircularBuffer<LineData>::ClearBuf() (1 times)

ADVICE: In function Interpolation::ChangeChannelMode()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop with loop variable 'index' at lines ../src/interpolation/interpolation.cpp:1393-1395
	for the statement ((double *)(*this).m_data)[index+311] = 0.0; at line 1394

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_data;
	and                    ((double *)(*this).m_data)[index+311];
	do not access the same object in memory.

There are 70 memory accesses with 249 dependences.


==============================================================================

extern int _ZN13Interpolation19ManageInterpolationEv() is called from 1 sites in this file.
    It appears to be inlineable (size = 456 units)
    It has 6 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	Interpolation::GetMachiningData() (1 times)
	Interpolation::CopyNonMoveInfo() (1 times)
	Interpolation::SetAxisDynamicMask() (1 times)
	std::__c6xabi_isnan() (1 times)
	Interpolation::SetStopState() (3 times)
	Interpolation::UpdateStartCondition() (1 times)
	Interpolation::ChangeChannelMode() (2 times)
	LineData::LineData() (1 times)

ADVICE: In function Interpolation::ManageInterpolation()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1033-1042
	for the statement ((double *)(double (*)[64])(*this).m_geometry)[i] = ((double *)(double (*)[64])(*this).m_data)[i+180]; at line 1039
	and the statement ((double *)(double (*)[64])(*this).m_geometry)[i] = ((double *)(double (*)[64])(*(*this).m_geometry).end_data)[i+180]; at line 1036

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

ADVICE: In function Interpolation::ManageInterpolation()() in ../src/interpolation/interpolation.cpp
	in the 'for' loop at lines ../src/interpolation/interpolation.cpp:1033-1042
	for the statement ((double *)(double (*)[64])(*this).m_geometry)[i] = ((double *)(double (*)[64])(*(*this).m_geometry).end_data)[i+180]; at line 1036

	Consider declaring 'this' as struct nterpolation * const restrict this
	to assert that lvalues (*this).m_geometry;
	and                    (*(*this).m_geometry).end_data;
	do not access the same object in memory.

There are 154 memory accesses with 951 dependences.


==============================================================================

extern void _ZN13Interpolation17SetSingleLineModeEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 38 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 12 memory accesses with 3 dependences.


==============================================================================

extern void _ZN13Interpolation17SetRetRefPosStateEbh() is called from 0 sites in this file.
    It appears to be inlineable (size = 64 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::SetMode() (1 times)
	CircularBuffer<LineData>::ClearBuf() (2 times)
	Interpolation::ChangeChannelMode() (1 times)

There are 48 memory accesses with 244 dependences.


==============================================================================

extern void _ZN13Interpolation14SetAxisMoveCmdE12NCCCmdNumbertbddb() is called from 0 sites in this file.
    It has 5 non-trivial scope blocks nested 5 deep.
    It calls these functions:
	mask_64::CheckMask() (6 times)
	CircularBuffer<LineData>::ClearBuf() (1 times)
	CircularBuffer<LineData>::WriteData() (1 times)
	CircularBuffer<LineData>::ReadDataPtr() (1 times)

There are 124 memory accesses with 1904 dependences.


==============================================================================

extern void _ZN13Interpolation12SetHeartbeatEb() is called from 0 sites in this file.
    It appears to be inlineable (size = 12 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 2 memory accesses with 0 dependences.


==============================================================================

extern void _ZN13Interpolation11SetFeedRateE9RatioTyped() is called from 0 sites in this file.
    It appears to be inlineable (size = 165 units)
    It has 5 non-trivial scope blocks nested 4 deep.
    It calls these functions:
	<NONE>

There are 34 memory accesses with 50 dependences.


==============================================================================

extern int _ZN13Interpolation11InterpolateEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 62 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	Interpolation::Pause() (1 times)
	Interpolation::ManageInterpolation() (1 times)
	LineData::LineData() (1 times)

There are 16 memory accesses with 4 dependences.


==============================================================================

extern int _ZN13Interpolation11AddIntpDataEP8LineData() is called from 0 sites in this file.
    It appears to be inlineable (size = 15 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	CircularBuffer<LineData>::InsertData() (1 times)

There are 3 memory accesses with 0 dependences.


==============================================================================

extern enum hannelMode _ZN13Interpolation10GetCurModeEv() is called from 0 sites in this file.
    It appears to be inlineable (size = 4 units)
    It has 3 non-trivial scope blocks nested 3 deep.
    It calls these functions:
	<NONE>

There are 1 memory accesses with 0 dependences.

<<NULL MIX DOMAIN>>

== END OF INFO OUTPUT==
